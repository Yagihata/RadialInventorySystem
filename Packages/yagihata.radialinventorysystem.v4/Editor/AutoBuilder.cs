#if RISV4_JSON
using System.IO;
using System;
using UnityEditor;
using UnityEngine;
using VRC.SDK3.Avatars.Components;
using VRC.SDKBase.Editor.BuildPipeline;
using System.Collections.Generic;
using System.Linq;

namespace YagihataItems.RadialInventorySystemV4
{
    public class AutoBuilder : IVRCSDKBuildRequestedCallback
    {
        public int callbackOrder => 10;

        public bool OnBuildRequested(VRCSDKRequestedBuildType requestedBuildType)
        {
            if(!EditorSettings.AutoSetupMenu && !EditorSettings.AutoSetupParams)
                return true;

            if(requestedBuildType == VRCSDKRequestedBuildType.Avatar)
            {
                var avatars = new List<Avatar>();

                if(!Directory.Exists(RIS.AutoGeneratedFolderPath))
                    Directory.CreateDirectory(RIS.AutoGeneratedFolderPath);
                var dirs = Directory.GetDirectories(RIS.AutoGeneratedFolderPath);
                foreach (var path in dirs)
                {
                    var jsonPath = path.TrimEnd() + "\\" + RIS.SettingsFileName;
                    if(File.Exists(jsonPath))
                    {
                        try
                        {
                            var avatar = Avatar.LoadFromJson(jsonPath);
                            if (avatar.AvatarRoot != null && avatar.AvatarRoot.GetObject() != null)
                            {
                                if(!avatars.Any(v => v.AvatarRoot == avatar.AvatarRoot) || !avatars.Any(v => v.LastWriteDate < avatar.LastWriteDate))
                                    avatars.Add(avatar);
                                else
                                    Debug.LogWarning($"Multiple duplicate data were found. Use lastest data. => {avatar.UniqueID}");
                            }

                        }
                        catch (Exception ex)
                        {
                            Debug.LogError(ex);
                            EditorUtility.DisplayDialog(RISStrings.GetString("ris"), string.Format(RISStrings.GetString("broken_settings"), Path.GetDirectoryName(jsonPath)), RISStrings.GetString("ok"));
                        }
                    }
                }
                foreach (VRCAvatarDescriptor obj in UnityEngine.Object.FindObjectsOfType(typeof(VRCAvatarDescriptor)))
                {
                    if(obj.gameObject.activeInHierarchy)
                    {
                        var loadedAvatar = avatars.FirstOrDefault(n => n.AvatarRoot == obj);
                        if(loadedAvatar != null)
                            CheckExpressionMenu(loadedAvatar);
                    }
                }
            }
            return true;
        }
        public void CheckExpressionMenu(Avatar avatar)
        {
            var avatarRoot = avatar.AvatarRoot.GetObject();
            if (avatarRoot == null)
                return;

            if (EditorSettings.AutoSetupMenu)
            {
                var menu = avatarRoot?.expressionsMenu;
                var control = menu != null ? menu.controls.FirstOrDefault(item => item.name == "Radial Inventory") : null;
                var reCreateFlag =
                    menu == null ||
                    control == null ||
                    control.subMenu == null ||
                    control.subMenu.controls.Count <= 0 ||
                    control.subMenu.controls.Any(item => item.type == VRC.SDK3.Avatars.ScriptableObjects.VRCExpressionsMenu.Control.ControlType.SubMenu && item.subMenu.controls.Count <= 0);
                if (reCreateFlag)
                    for (int i = 0; i < 5; i++)
                    {
                        //5回は試行する
                        if (!reCreateFlag)
                            break;
                        avatar.ReCreateExpressionMenu();
                    }
            }
            if (EditorSettings.AutoSetupParams)
            {
                var param = avatarRoot?.expressionParameters;
                if (param == null)
                {
                    avatar.ReCreateExpressionParams();
                }
            }
        }
    }
}
#endif