using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;


namespace YagihataItems.RadialInventorySystemV4
{
    public class SelectJSONWindow : EditorWindow
    {
        private Dictionary<string, DateTime> items = new Dictionary<string, DateTime>();
        public string selectedUniqueID { get; private set; }
        private DateTime selectedDateTime = DateTime.MinValue;
        private Vector2 scrollPosition = new Vector2();
        private GUIStyle titleStyle = null;

        public void AddItem(string uniqueID, DateTime lastWriteTime)
        {
            items.Add(uniqueID, lastWriteTime);
            if (lastWriteTime > selectedDateTime)
            {
                selectedDateTime = lastWriteTime;
                selectedUniqueID = uniqueID;
            }
        }

        private void OnGUI()
        {
            if (titleStyle == null)
            {
                titleStyle = new GUIStyle("ProjectBrowserHeaderBgTop");
                titleStyle.fontSize = 24;
                titleStyle.stretchHeight = true;
                titleStyle.fixedHeight = 34;
                titleStyle.alignment = TextAnchor.MiddleLeft;

            }
            GUILayout.Space(10);
            EditorGUILayout.LabelField(RISStrings.GetString("selector_title"), titleStyle, GUILayout.ExpandWidth(true), GUILayout.Height(34));
            EditorGUILayout.LabelField(RISStrings.GetString("selector_description"), GUILayout.Height(EditorGUIUtility.singleLineHeight * 2.5f));
            GUILayout.Space(10);
            using (var scrollScope = new EditorGUILayout.ScrollViewScope(scrollPosition))
            {
                scrollPosition = scrollScope.scrollPosition;
                var removeKeys = new List<string>();
                foreach (var item in items)
                {
                    using (new EditorGUILayout.HorizontalScope(GUI.skin.box))
                    {
                        using (new EditorGUILayout.VerticalScope())
                        {
                            EditorGUILayout.LabelField($"{RISStrings.GetString("selector_uniqueid")}: {item.Key}");
                            EditorGUILayout.LabelField($"{RISStrings.GetString("selector_lastwrite")}: {item.Value}");
                        }
                        using (new EditorGUILayout.VerticalScope(GUILayout.Width(80)))
                        {
                            if (GUILayout.Button(RISStrings.GetString("selector_select")))
                            {
                                selectedUniqueID = item.Key;
                                selectedDateTime = item.Value;
                                Close();
                            }
                            using (new EditorGUI.DisabledGroupScope(items.Count <= 1))
                            {
                                if (GUILayout.Button(RISStrings.GetString("selector_disable")))
                                {
                                    if (EditorUtility.DisplayDialog(RISStrings.GetString("selector_disabletitle"), RISStrings.GetString("selector_disablebody"), RISStrings.GetString("yes"), RISStrings.GetString("no")))
                                    {
                                        var jsonPath = $"{RIS.AutoGeneratedFolderPath}{item.Key}/{RIS.SettingsFileName}";
                                        if (File.Exists(jsonPath))
                                        {
                                            try
                                            {
                                                File.Move(jsonPath, $"{jsonPath}.bak");
                                                removeKeys.Add(item.Key);
                                            }
                                            catch (Exception ex)
                                            {
                                                Debug.LogError(ex);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                foreach (var key in removeKeys)
                {
                    items.Remove(key);
                    if(selectedUniqueID == key)
                    {
                        selectedUniqueID = items.First().Key;
                        selectedDateTime= items.First().Value;
                    }
                }
            }
        }
    }
}