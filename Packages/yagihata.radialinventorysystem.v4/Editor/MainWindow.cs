#if RISV4_JSON
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditor.Animations;
using UnityEditorInternal;
using UnityEngine;
using VRC.SDK3.Avatars.Components;
using VRC.SDK3.Avatars.ScriptableObjects;
using VRC.SDKBase;

namespace YagihataItems.RadialInventorySystemV4
{
    public class MainWindow : EditorWindow
    {
        private IndexedList indexedList = new IndexedList();
        private Vector2 scrollPosition = new Vector2();
        private float beforeWidth = 0f;
        private bool showingVerticalScroll;
        private Rect tabScopeRect = new Rect();
        private Dictionary<RIS.MenuModeType, EditorTab> tabItems = null;
        private List<Avatar> avatars = null;
        private GUIStyle countBarStyleL;
        private GUIStyle countBarStyleR;
        private GUIStyle donatorLabelStyle;
        private VRCAvatarDescriptor avatarRoot = null;
        private Avatar risAvatar = null;
        private int beforeY = 0;
        [MenuItem("Radial Inventory/RISV4 Editor")]
        private static void Create()
        {
            RISStrings.EditorInitialize();
            GetWindow<MainWindow>("RISV4 Editor");
        }
        private void LoadAvatars()
        {
            if(avatars == null)
                avatars = new List<Avatar>();
            else
                avatars.Clear();

            if (!Directory.Exists(RIS.AutoGeneratedFolderPath))
                Directory.CreateDirectory(RIS.AutoGeneratedFolderPath);
            var dirs = Directory.GetDirectories(RIS.AutoGeneratedFolderPath);
            foreach (var path in dirs)
            {
                var jsonPath = path.TrimEnd() + "\\" + RIS.SettingsFileName;
                if (File.Exists(jsonPath))
                {
                    try
                    {
                        var avatar = Avatar.LoadFromJson(jsonPath);
                        if (avatar.AvatarRoot != null && avatar.AvatarRoot.GetObject() != null)
                        {
                            if (!avatars.Any(v => v.AvatarRoot == avatar.AvatarRoot) || !avatars.Any(v => v.LastWriteDate < avatar.LastWriteDate))
                                avatars.Add(avatar);
                            else
                                Debug.LogWarning($"Multiple duplicate data were found. Use lastest data. => {avatar.UniqueID}");
                        }

                    }
                    catch(Exception ex)
                    {
                        Debug.LogError(ex);
                        EditorUtility.DisplayDialog(RISStrings.GetString("ris"), string.Format(RISStrings.GetString("broken_settings"), Path.GetDirectoryName(jsonPath)), RISStrings.GetString("ok"));
                    }
                }
            }
        }
        private void OnGUI()
        {
            AdsUpdater.DoUpdate();
            if(tabItems == null)
            {
                tabItems = new Dictionary<RIS.MenuModeType, EditorTab>();
                tabItems.Add(RIS.MenuModeType.Simple, new TabSimple());
                tabItems.Add(RIS.MenuModeType.Basic, new TabBasic());
                tabItems.Add(RIS.MenuModeType.Advanced, new TabAdvanced());
            }
            if (countBarStyleL == null)
                countBarStyleL = new GUIStyle(GUI.skin.label) { fontSize = 10, alignment = TextAnchor.UpperLeft, margin = new RectOffset(10, 10, 0, 0) };
            if (countBarStyleR == null)
                countBarStyleR = new GUIStyle(GUI.skin.label) { fontSize = 10, alignment = TextAnchor.UpperRight, margin = new RectOffset(10, 10, 0, 0) };
            if (donatorLabelStyle == null)
                donatorLabelStyle = new GUIStyle(GUI.skin.label) { alignment = TextAnchor.UpperCenter, margin = new RectOffset(10, 10, 20, 20), wordWrap = true };
            if (avatars == null)
                LoadAvatars();
            using (var scrollScope = new EditorGUILayout.ScrollViewScope(scrollPosition))
            {
                using (var verticalScope = new EditorGUILayout.VerticalScope())
                {
                    scrollPosition = scrollScope.scrollPosition;
                    var headerTexture = TexAssets.HeaderTexture;
                    var newerVersion = VersionChecker.GetNewerVersion();
                    var showingVerticalScrollOld = showingVerticalScroll;
                    if (verticalScope.rect.height != 0)
                        showingVerticalScroll = verticalScope.rect.height >= position.size.y;
                    var height = position.size.x / headerTexture.width * headerTexture.height;
                    if (height > headerTexture.height)
                        height = headerTexture.height;
                    var width = position.size.x - (showingVerticalScroll ? 22 : 8);
                    GUILayout.Space(2);
                    var newVersion = newerVersion;
                    if (!newerVersion.StartsWith("ris_"))
                        newVersion = RIS.CurrentVersion;
                    EditorGUILayoutExtra.HeaderWithVersionInfo(headerTexture, width == beforeWidth ? width: beforeWidth, height, $"VERSION-{newVersion}", $"VERSION-{RIS.CurrentVersion}", "ris", "新しいバージョンがあります", RIS.DownloadUrl);
                    
                    EditorGUILayoutExtra.Space();

                    if(RISV3toV4Updater.HasV3SettingsOnScene(RIS.SettingsNameV3))
                    {
                        EditorGUILayoutExtra.Separator();
                        EditorGUILayout.HelpBox(RISStrings.GetString("found_v3"), MessageType.Info);
                        if(GUILayout.Button(RISStrings.GetString("v3tov4")))
                        {
                            RISV3toV4Updater.SalvageDatas(RIS.SettingsNameV3);
                        }
                        EditorGUILayoutExtra.Separator();
                        EditorGUILayoutExtra.Space();
                    }
                    EditorGUI.BeginChangeCheck();
                    var avatarDescriptors = FindObjectsOfType(typeof(VRCAvatarDescriptor));
                    indexedList.list = avatarDescriptors.Select(n => n.name).ToArray();
                    indexedList.index = EditorGUILayoutExtra.IndexedStringList(RISStrings.GetString("target_avatar"), indexedList, RISStrings.GetString("unselected"));

                    if (EditorGUI.EndChangeCheck() || (avatarRoot == null && indexedList.index != -1))
                    {
                        LoadAvatars();
                        if (avatarDescriptors.Count() > 0 && indexedList.index >= 0 && indexedList.index < avatarDescriptors.Length)
                        {
                            avatarRoot = avatarDescriptors[indexedList.index] as VRCAvatarDescriptor;
                            var loadedAvatar = avatars.FirstOrDefault(n => n.AvatarRoot == avatarRoot);
                            if (loadedAvatar != null)
                                risAvatar = loadedAvatar;
                            else
                                risAvatar = new Avatar();
                            foreach (var v in tabItems.Values)
                                v.InitializeTab(ref risAvatar);
                        }
                        else
                        {
                            avatarRoot = null;
                            risAvatar = null;
                        }
                    }
                    var isRootNull = avatarRoot == null;
                    if (risAvatar == null)
                        risAvatar = new Avatar();
                    if (!isRootNull && risAvatar != null && risAvatar.AvatarRoot?.GetObject() == null)
                    {
                        risAvatar.AvatarRoot.SetObject(avatarRoot);
                    }
                    using (new EditorGUI.DisabledGroupScope(isRootNull))
                    {
                        using (new EditorGUILayout.HorizontalScope())
                        {
                            if (GUILayout.Button(RISStrings.GetString("export_file"), new GUIStyle("ButtonLeft")))
                            {
                                if (risAvatar.AvatarRoot.GetObject() == null)
                                    return;
                                var path = EditorUtility.SaveFilePanel(RISStrings.GetString("select_savepath"), "", $"RISSettings-{SafeParser.ParseFileName(risAvatar.AvatarRoot.GetObject().name)}.json", "json");
                                if (!string.IsNullOrEmpty(path))
                                {
                                    risAvatar.SaveToJson(path);
                                    EditorUtility.DisplayDialog(RISStrings.GetString("ris"), RISStrings.GetString("save_file"), RISStrings.GetString("ok"));
                                }
                            }
                            if (GUILayout.Button(RISStrings.GetString("restore_file"), new GUIStyle("ButtonRight")))
                            {
                                var path = EditorUtility.OpenFilePanel(RISStrings.GetString("select_loadpath"), "", "json");
                                if (!string.IsNullOrEmpty(path))
                                {
                                    var avatar = Avatar.LoadFromJson(path);
                                    risAvatar.UseWriteDefaults = avatar.UseWriteDefaults;
                                    risAvatar.OptimizeParameters = avatar.OptimizeParameters;
                                    risAvatar.ApplyEnableDefault = avatar.ApplyEnableDefault;
                                    risAvatar.Groups = avatar.Groups;
                                    risAvatar.ExclusiveModes = avatar.ExclusiveModes;
                                    risAvatar.MenuMode = avatar.MenuMode;
                                    risAvatar.ForceReload();
                                    foreach (var v in tabItems.Values)
                                        v.InitializeTab(ref risAvatar);
                                    EditorUtility.DisplayDialog(RISStrings.GetString("ris"), RISStrings.GetString("load_file"), RISStrings.GetString("ok"));
                                }
                            }
                        }
                        EditorGUILayoutExtra.SeparatorWithSpace();

                        var memoryAdded = 0;
                        using (new EditorGUILayout.VerticalScope())
                        {
                            using (new EditorGUILayout.HorizontalScope())
                            {
                                GUILayout.Space(5);
                                risAvatar.MenuMode = (RIS.MenuModeType)GUILayout.Toolbar((int)risAvatar.MenuMode, TabStyle.GetTabToggles<RIS.MenuModeType>(), TabStyle.TabButtonStyle, TabStyle.TabButtonSize);
                                GUILayout.FlexibleSpace();
                            }
                            var skin = new GUIStyle(GUI.skin.box);
                            skin.margin.top = 0;
                            using (var scope = new EditorGUILayout.VerticalScope(skin))
                            {
                                tabScopeRect = scope.rect;
                                if (tabItems.ContainsKey(risAvatar.MenuMode))
                                    tabItems[risAvatar.MenuMode].DrawTab(ref risAvatar, position, showingVerticalScroll && showingVerticalScrollOld);
                            }
                            var memoryNow = 0;
                            var memoryUseFromScript = 0;
                            if (!isRootNull)
                            {
                                if (tabItems.ContainsKey(risAvatar.MenuMode))
                                {
                                    tabItems[risAvatar.MenuMode].CalculateMemoryCost(ref risAvatar, out memoryAdded, out memoryNow, out memoryUseFromScript);
                                }
                            }
                            EditorGUILayoutExtra.CostViewer(memoryNow, memoryAdded, memoryUseFromScript, RISStrings.GetString("using_memory"), RISStrings.GetString("remain_memory"), countBarStyleL, countBarStyleR);
                        }

                        EditorGUILayoutExtra.SeparatorWithSpace();
                        string[] errors;
                        if (tabItems.ContainsKey(risAvatar.MenuMode))
                            errors = tabItems[risAvatar.MenuMode].CheckErrors(ref risAvatar);
                        else
                            errors = new string[] { };
                        var memoryOver = false;


                        EditorGUIUtility.labelWidth = RISStrings.GetWidth(0);
                        risAvatar.UseWriteDefaults = EditorGUILayout.Toggle(RISStrings.GetString("use_writedefaults"), risAvatar.UseWriteDefaults);
                        UnityEditor.Animations.AnimatorController fxLayer = null;
                        if (!isRootNull) fxLayer = avatarRoot.GetFXLayer(RIS.AutoGeneratedFolderPath + risAvatar.UniqueID + "/", false);
                        risAvatar.OptimizeParameters = EditorGUILayout.Toggle(RISStrings.GetString("optimize_params"), risAvatar.OptimizeParameters);
                        risAvatar.ApplyEnableDefault = EditorGUILayout.Toggle(RISStrings.GetString("apply_defaults"), risAvatar.ApplyEnableDefault);

                        EditorGUIUtility.labelWidth = 0;
                        EditorGUILayoutExtra.Space();
                        var showFXWarning = fxLayer != null && !fxLayer.ValidateWriteDefaults(risAvatar.UseWriteDefaults);
                        var showParamInfo = !risAvatar.OptimizeParameters;
                        memoryOver = memoryAdded > VRCExpressionParameters.MAX_PARAMETER_COST;
                        if (showFXWarning || showParamInfo || errors.Any() || memoryOver)
                            using (new EditorGUILayout.VerticalScope(GUI.skin.box))
                            {
                                if (memoryOver)
                                {
                                    EditorGUILayout.HelpBox(string.Format(RISStrings.GetString("err_overmemory"), VRCExpressionParameters.MAX_PARAMETER_COST), MessageType.Error);
                                }
                                foreach (var error in errors)
                                {
                                    EditorGUILayout.HelpBox(error, MessageType.Error);
                                }
                                if (showFXWarning)
                                {
                                    EditorGUILayout.HelpBox(RISStrings.GetString("warn_writedefaults"), MessageType.Warning);
                                }
                                if (showParamInfo)
                                {
                                    EditorGUILayout.HelpBox(RISStrings.GetString("warn_paramspace"), MessageType.Info);
                                }
                            }

                        EditorGUILayoutExtra.SeparatorWithSpace();
                        using (new EditorGUILayout.HorizontalScope())
                        {
                            using (new EditorGUI.DisabledGroupScope(errors.Any() || memoryOver))
                            {
                                if (GUILayout.Button(RISStrings.GetString("attach"), new GUIStyle("ButtonLeft")))
                                {
                                    risAvatar.SaveToJson();
                                    if (tabItems.ContainsKey(risAvatar.MenuMode))
                                        tabItems[risAvatar.MenuMode].ApplyToAvatar(ref risAvatar);
                                }
                            }
                            if (GUILayout.Button(RISStrings.GetString("detach"), new GUIStyle("ButtonRight")))
                            {
                                tabItems[risAvatar.MenuMode].RemoveFromAvatar(ref risAvatar);
                            }
                        }
                    }
                    EditorGUILayoutExtra.SeparatorWithSpace();
                    if (TexAssets.AdsTexture != null)
                    {
                        using (new EditorGUILayout.VerticalScope(GUI.skin.box))
                        {
                            using (var adsScope = new EditorGUILayout.VerticalScope())
                            {
                                var y = (int)adsScope.rect.y;
                                if (y > 0)
                                    beforeY = y;
                                var label = string.IsNullOrEmpty(AdsUpdater.CurrentAdsURL) ? "" : RISStrings.GetString("click_open");
                                EditorGUILayoutExtra.HeaderWithVersionInfo(TexAssets.AdsTexture, (width == beforeWidth ? width : beforeWidth) - 10, height, "", "[AD]", "", label, AdsUpdater.CurrentAdsURL, beforeY + 10);
                            }
                            using (new EditorGUILayout.HorizontalScope())
                            {
                                GUILayout.FlexibleSpace();
                                EditorGUILayoutExtra.LinkLabel(RISStrings.GetString("pr_ads"), Color.blue, new Vector2(), 0, RIS.PRUrl);
                                GUILayout.FlexibleSpace();
                            }
                        }
                        EditorGUILayoutExtra.SeparatorWithSpace();
                    }
                    using (new EditorGUILayout.VerticalScope(GUI.skin.box))
                    {
                        EditorGUILayout.HelpBox(RISStrings.GetString("main_helpbox"), MessageType.None);
                        using (new EditorGUILayout.HorizontalScope())
                        {
                            EditorGUILayoutExtra.LinkLabel(RISStrings.GetString("manual_title"), Color.blue, new Vector2(), 0, RIS.ManualUrl);
                            GUILayout.FlexibleSpace();
                        }
                        using (new EditorGUILayout.HorizontalScope())
                        {
                            EditorGUILayoutExtra.LinkLabel(RISStrings.GetString("author_twitter"), Color.blue, new Vector2(), 0, RIS.TwitterUrl);
                            GUILayout.FlexibleSpace();
                        }
                    }
                    var donators = DonatorListUpdater.GetDonators();
                    if(!string.IsNullOrWhiteSpace(donators))
                    {
                        GUILayout.Space(10);
                        using (new EditorGUILayout.VerticalScope(GUI.skin.box))
                        {
                            EditorGUILayout.LabelField(RISStrings.GetString("donators_title"), new GUIStyle("ProjectBrowserHeaderBgTop"), GUILayout.ExpandWidth(true));
                            EditorGUILayout.LabelField(donators, donatorLabelStyle, GUILayout.ExpandWidth(true));
                        }
                    }
                    beforeWidth = width;
                    GUILayout.FlexibleSpace();
                }
            }
        }
    }
}
#endif