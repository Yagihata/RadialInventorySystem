using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;
using VRC.SDK3.Avatars.Components;
using VRC.SDK3.Avatars.ScriptableObjects;
using VRC.SDKBase;
using YagihataItems.YagiUtils;

namespace YagihataItems.RadialInventorySystemV3
{
    public class RISMainWindow : EditorWindow
    {
        private RISSettings settings;
        private VRCAvatarDescriptor avatarRoot = null;
        private VRCAvatarDescriptor avatarRootBefore = null;
        private IndexedList indexedList = new IndexedList();
        private RISVariables variables;
        private Vector2 scrollPosition = new Vector2();
        [SerializeField] private Texture2D headerTexture = null;
        [MenuItem("RadialInventory/RISV3 Editor")]
        private static void Create()
        {
            GetWindow<RISMainWindow>("RISV3 Editor");
        }
        private void OnGUI()
        {
            using (var scrollScope = new EditorGUILayout.ScrollViewScope(scrollPosition))
            {
                using (var verticalScope = new EditorGUILayout.VerticalScope())
                {
                    scrollPosition = scrollScope.scrollPosition;
                    if (headerTexture == null)
                        headerTexture = AssetDatabase.LoadAssetAtPath<UnityEngine.Texture2D>(RISV3.workFolderPath + "Textures/MenuHeader.png");

                    var newerVersion = RISVersionChecker.GetNewerVersion();
                    EditorGUILayoutExtra.HeaderWithVersionInfo(headerTexture, verticalScope.rect, position, newerVersion, RISV3.currentVersion, "ris");

                    EditorGUILayoutExtra.Space();
                    var avatarDescriptors = FindObjectsOfType(typeof(VRCAvatarDescriptor));
                    indexedList.list = avatarDescriptors.Select(n => n.name).ToArray();
                    indexedList.index = EditorGUILayoutExtra.IndexedStringList("対象アバター", indexedList);
                    if (avatarDescriptors.Length <= 0)
                    {
                        EditorGUILayout.HelpBox("VRCAvatarDescriptorが設定されているオブジェクトが存在しません。", MessageType.Error);
                    }
                    else
                    {
                        if (indexedList.index >= 0 && indexedList.index < avatarDescriptors.Length)
                            avatarRoot = avatarDescriptors[indexedList.index] as VRCAvatarDescriptor;
                        else
                            avatarRoot = null;
                        var rootIsNull = avatarRoot == null;
                        if (rootIsNull)
                        {
                            avatarRootBefore = null;
                        }
                        using (new EditorGUI.DisabledGroupScope(rootIsNull))
                        {
                            //AvatarRootが変更されたら設定を復元
                            if (!rootIsNull && avatarRoot != avatarRootBefore)
                            {
                                RestoreSettings();
                                avatarRootBefore = avatarRoot;

                            }

                            EditorGUILayoutExtra.SeparatorWithSpace();
                            if (!rootIsNull)
                                variables.AvatarRoot = avatarRoot;
                            EditorGUILayoutExtra.SeparatorWithSpace();
                            variables.WriteDefaults = EditorGUILayout.Toggle("Write Defaults", variables.WriteDefaults);
                            AnimatorController fxLayer = null;
                            if (!rootIsNull) fxLayer = avatarRoot.GetFXLayer(RISV3.autoGeneratedFolderPath + variables.FolderID + "/", false);
                            if (fxLayer != null && !fxLayer.ValidateWriteDefaults(variables.WriteDefaults))
                            {
                                EditorGUILayout.HelpBox("WriteDefaultsがFXレイヤー内で統一されていません。\n" +
                                    "このままでも動作はしますが、表情切り替えにバグが発生する場合があります。\n" +
                                    "WriteDefaultsのチェックを切り替えてもエラーメッセージが消えない場合は使用している他のアバターギミックなどを確認してみてください。", MessageType.Warning);
                            }
                            variables.OptimizeParams = EditorGUILayout.Toggle("パラメータの最適化", variables.OptimizeParams);
                            if (!variables.OptimizeParams)
                            {
                                EditorGUILayout.HelpBox("パラメータの最適化が無効になっています。\n" +
                                    "空パラメータや重複パラメータを自動で削除したい場合は\n" +
                                    "パラメータの最適化を行ってください。", MessageType.Info);
                            }
                            EditorGUILayoutExtra.SeparatorWithSpace();
                            if (GUILayout.Button("適用する"))
                            {
                                SaveSettings();
                                //MakeMenu();
                                //ApplyToAvatar();
                            }
                            if (GUILayout.Button("適用を解除する"))
                            {
                                SaveSettings();
                                //RemoveAutoGenerated();
                            }
                        }
                    }
                    EditorGUILayoutExtra.SeparatorWithSpace();
                    using (new EditorGUILayout.VerticalScope(GUI.skin.box))
                    {
                        EditorGUILayout.HelpBox("Radial Inventory Systemをダウンロードしてくださり、誠にありがとうございます！\n" +
                        "使用法がわからない場合は、下記リンクより説明書をご覧になった上で使ってみてください。\n" +
                        "もしバグや機能追加の要望などありましたら、TwitterのDMで教えていただけますと幸いです。", MessageType.None);
                        //EditorGUILayoutExtra.LinkLabel("AniPIN – Avatar Lock System 説明書", Color.blue, new Vector2(), 0, RISV3.manualUrl);
                        using(new EditorGUILayout.HorizontalScope())
                        {
                            EditorGUILayoutExtra.LinkLabel("Twitter : @Yagihata4x", Color.blue, new Vector2(), 0, RISV3.twitterUrl);
                            GUILayout.FlexibleSpace();
                        }
                    }
                }
            }
        }
        private void RestoreSettings()
        {
            variables = new RISVariables();
            settings = EditorExtSettingsTool.RestoreSettings<RISSettings>(avatarRoot, RISV3.settingsName) as RISSettings;
            if (settings != null)
                variables = settings.GetVariables() as RISVariables;
            else
                variables.FolderID = System.Guid.NewGuid().ToString();
        }
        private void SaveSettings()
        {
            Debug.Assert(variables != null);
            EditorExtSettingsTool.SaveSettings<RISSettings>(avatarRoot, RISV3.settingsName, variables);
        }
    }
}